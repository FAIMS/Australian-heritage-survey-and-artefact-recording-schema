/************************************ MAP *************************************/

void initMap() {

  setMapZoom(MAP_REF, 15.0f);
  // Shape
  // isEntity = true;
  showBaseMap(MAP_REF, "Base Raster Map", "files/data/maps/Basemap.3857.tif");

  
}


void centreMe() {
  String mapRef = "Control/Map/Map";
  if(!isExternalGPSOn() && !isInternalGPSOn()) {
    showToast("{GPS_Not_Initialised}");
  } else {
    centerOnCurrentPosition(mapRef);
  }
}
void refreshMap() {
  String mapRef = "Control/Map/Map";
  refreshMap(mapRef);
}

initMap();
addOnEvent("Control/Map",           "show",  "refreshMap()");



// DATA_ENTRY_LAYER    = "Data Entry Layer";
// DATA_ENTRY_LAYER_ID = createCanvasLayer(MAP_REF, DATA_ENTRY_LAYER);

// DATA_ENTRY_IDS.put(MAP_REF, DATA_ENTRY_LAYER_ID);

// setSelectedLayer(MAP_REF, DATA_ENTRY_LAYER);
setMapZoom(MAP_REF, 15.0f);

void refreshMap() {
  refreshMap(MAP_REF);
}

// showDatabaseLayers(MAP_REF);
addOnEvent(getTabRef(MAP_REF), "show",  "refreshMap()");

void addDatabaseLayer(String layerName, String tableName, String hexColourCode){
  int transBlk = Color.parseColor("#AA000000");
  int hexColour = Color.parseColor(hexColourCode);
  //int hexColour = Color.BLACK;
  GeometryStyle sln_ = createLineStyle(10, transBlk, 0.01f, 0.3f, null);
  String q;

  q  = "SELECT uuid, aenttimestamp";
  q += "  FROM latestNonDeletedArchEnt";
  q += "  JOIN aenttype USING (aenttypeid)";
  q += " WHERE aenttypename = {aenttypename}";  
  q  = dbReplaceFirst(q, "{aenttypename}", tableName);
  Log.w("databaselayer",q);
  boolean isEntity = true;
  GeometryStyle spt = createPointStyle(5, hexColour, 0.5f, 3f);
  GeometryStyle sln = createLineStyle(5, hexColour, 0.05f, 0.3f, null);
  GeometryStyle spg = createPolygonStyle(5, hexColour, sln_);
  GeometryTextStyle stx = createTextStyle(
      10,
      Color.BLACK,
      40,
      Typeface.SANS_SERIF
  );
  showDatabaseLayer(
      MAP_REF,
      layerName,
      isEntity,
      layerName,
      q,
      spt,
      sln,
      spg,
      stx
  );
}


void addBoundaryDatabaseLayer(String layerName, String tableName, String hexColourCode){
  int transBlk = Color.parseColor("#AA000000");
  int hexColour = Color.parseColor(hexColourCode);
  GeometryStyle sln_ = createLineStyle(5, transBlk, 0.01f, 0.3f, null);
  String q;

  q  = "SELECT uuid, aenttimestamp";
  q += "  FROM latestNonDeletedArchEnt";
  q += "  JOIN aenttype USING (aenttypeid)";
  q += "  JOIN parentchild ON (uuid = childuuid)";
  q += " WHERE aenttypename = {aenttypename}";  //remember the db replace auto-quotes
  q  = dbReplaceFirst(q, "{aenttypename}",  tableName);
  Log.w("boundary", q);
  boolean isEntity = true;
  GeometryStyle spt = createPointStyle(5, hexColour, 0.1f, 1f);
  GeometryStyle sln = createLineStyle(5, hexColour, 0.05f, 0.3f, null);
  GeometryStyle spg = createPolygonStyle(5, hexColour, sln_);
  GeometryTextStyle stx = createTextStyle(
      10,
      Color.BLACK,
      40,
      Typeface.SANS_SERIF
  );
  showDatabaseLayer(
      MAP_REF,
      layerName,
      isEntity,
      layerName,
      q,
      spt,
      sln,
      spg,
      stx
  );
}

//To enable or disable the tools bar and layers bar use the following
//
setToolsEnabled(MAP_REF, true);

// The create point, line and polygon tools trigger the tool create event when a geometry is created 
// and the Load tool triggers a tool load event when a geometry is selected. 
// Use the following to bind callback to those events.

onToolEvent(MAP_REF, "load", "onLoad()");

onLoad() {
    id = getMapGeometryLoaded(); // uuid or relationshipid of the vector element
    type = getMapGeometryLoadedType(); // either "entity" or "relationship"    
    showToast("Loading: "+id);
    loadEntityFrom(id);
}
  
// onMapEvent(MAP_REF, "clickCallback()", "selectCallback()");
addDatabaseLayer("Surface Exposure", "Surface Exposure", "#980000");
addBoundaryDatabaseLayer("Surface Exposure Boundary Point", "Surface Exposure Boundary point", "#980000");
addDatabaseLayer("Mound", "Mound", "#4a86e8");
addBoundaryDatabaseLayer("Mound Boundary Point", "Mound Boundary point", "#4a86e8"); //lowercase P is critical. 
addDatabaseLayer("Rock Shelter", "Rock Shelter", "#b7b7b7");
addBoundaryDatabaseLayer("Rock Shelter Boundary Point", "Rock Shelter Boundary point", "#b7b7b7"); //lowercase P is critical. 
addDatabaseLayer("Historical Feature", "Historical Feature", "#ff9900");
addBoundaryDatabaseLayer("Historical Feature Boundary Point", "Historical Feature Boundary point", "#ff9900"); //lowercase P is critical. 
addDatabaseLayer("Burial", "Burial", "#ff0000");
addBoundaryDatabaseLayer("Burial Boundary Point", "Burial Boundary point", "#ff0000"); //lowercase P is critical. 
addDatabaseLayer("POI", "Other Point of Interest", "#ff00ff");
addBoundaryDatabaseLayer("Other Point of Interest Boundary Point", "Other Point of Interest Boundary point", "#ff00ff"); //lowercase P is critical. 
addDatabaseLayer("Tree", "Tree", "#00ff00");
addDatabaseLayer("Flaked Stone Artefact", "Flaked Stone Artefact", "#000000");
addDatabaseLayer("Other Stone Artefact", "Other Stone Artefact", "#000000");
addDatabaseLayer("Discrete Hearth Artefact", "Discrete Hearth Artefact", "#000000");
addDatabaseLayer("Glass Artefact", "Glass Artefact", "#ffff00");
addDatabaseLayer("Ceramic Artefact", "Ceramic Artefact", "#ffff00");
addDatabaseLayer("Misc Artefact", "Misc Artefact", "#ffff00");



clickCallback() {
  point = getMapPointClicked();
  
  Log.i("clickCallback", point.toString());
}
 
selectCallback() {
  geomId = getMapGeometrySelected();
  geom = getGeometry(MAP_REF, geomId);

  Log.i("selectCallback", " "+geom.toString());
  //clearGeometryHighlights(MAP_REF);
}
/****************************** GIS POINT STYLES ******************************/
//final String MAP_REF = "Control/Map/Map";
/* Displays the geometry of each entity whose menu, by the name of `attribName`,
 * has `vocabName` saved in it. The geometry is displayed in whatever colour is
 * given by `geoColor`.
 *
 * The geometry is displayed in a layer called `layerName`. This is a
 * human-readable name that the user can use to toggle the visibility of the
 * geometry in the UI.
 */
// void showDatabaseLayerByVocabName(
//     String attribName,
//     String vocabName,
//     int    geoColor, /* Example argument: Color.BLACK */
//     String layerName
// ) {
//   int transBlk = Color.parseColor("#AA000000");
//   GeometryStyle sln_ = createLineStyle(10, transBlk, 0.01f, 0.3f, null);
//   // Define arguments to `showDatabaseLayer`
//   String q;
//   q  = "SELECT uuid, aenttimestamp";
//   q += "  FROM latestNonDeletedArchEnt";
//   q += "  JOIN latestnondeletedaentvalue USING (uuid)";
//   q += "  JOIN attributekey              USING (attributeid)";
//   q += "  JOIN vocabulary                USING (vocabid)";
//   q += " WHERE {vocabName}  IN ('', vocabname)";
//   q += "   AND {attribName} IN ('', attributename)";
//   q  = dbReplaceFirst(q, "{vocabName}",  vocabName);
//   q  = dbReplaceFirst(q, "{attribName}", attribName);
//   boolean isEntity = true;
//   GeometryStyle spt = createPointStyle(10, geoColor, 0.2f, 0.5f);
//   GeometryStyle sln = createLineStyle(10, geoColor, 0.05f, 0.3f, null);
//   GeometryStyle spg = createPolygonStyle(10, geoColor, sln_);
//   GeometryTextStyle stx = createTextStyle(
//       10,
//       Color.BLACK,
//       40,
//       Typeface.SANS_SERIF
//   );
//   showDatabaseLayer(
//       MAP_REF,
//       layerName,
//       isEntity,
//       layerName,
//       q,
//       spt,
//       sln,
//       spg,
//       stx
//   );
// }
// void showDatabaseLayerByVocabName(
//     String vocabName,
//     int    geoColor,
//     String layerName
// ) {
//   showDatabaseLayerByVocabName("", vocabName, geoColor, layerName);
// }
// void showDatabaseLayerByVocabName(String vocabName, int geoColor) {
//   String layerName = guessArch16nValFromKey(vocabName);
//   showDatabaseLayerByVocabName(vocabName, geoColor, layerName);
// }
// void initMap() {
//   //showBaseMap(MAP_REF, "Base Map", "files/data/Map/K-35-066-3_Razdel.tif");
//   /*
//   showDatabaseLayerByVocabName("{1___pristine}",   Color.GREEN);
//   showDatabaseLayerByVocabName("{2___minor_damage}", Color.BLUE);
//   showDatabaseLayerByVocabName("{3___damaged}",  Color.YELLOW);
//   showDatabaseLayerByVocabName("{4___seriously_damaged}", Color.parseColor("#FFA500"));//FFA500 is orange in hex
//   showDatabaseLayerByVocabName("{5___extinct_or_near_extinct}", Color.RED);
//   showDatabaseLayerByVocabName("{NA}",  Color.BLACK);
//   */
//   String refMap = "Control/Map/Map";
//   isEntity = true;
//   queryName = "Burial Mound";
//   querySQL = "SELECT uuid, aenttimestamp FROM latestNonDeletedArchEnt join aenttype using (aenttypeid) where aenttypename = 'Burial Mound'";
//   ps = createPointStyle(10, Color.BLUE, 0.2f, 0.5f);
//   ls = createLineStyle(10, Color.BLUE, 0.05f, 0.3f, null);
//   pos = createPolygonStyle(10, Color.parseColor("#440000FF"), createLineStyle(10, Color.parseColor("#AA000000"), 0.01f, 0.3f, null));
//   ts = createTextStyle(10, Color.BLUE, 30, Typeface.SANS_SERIF);
//   showDatabaseLayer(refMap, "Burial Mound Layer", isEntity, queryName, querySQL, ps, ls, pos, ts);
//   setMapZoom(MAP_REF, 13.0f);
// }
// initMap();
